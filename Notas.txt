üî¥ PENDIENTES
- Front: pasar los componentes de la auth a su feature respectivo
- Revisar el middleware
üü° NOTAS
- PDF desde angular con PDFMAKER
- En los casos de uso esta la respuesta del servidor
- En la impl de los datasources inyectar dependencias si los necesito
- Puedo crear mas impl de mis datasources con otras DB


Carpeta domain --> No utilizar dependecias externas 

Section 2 / Implementaci√≥n del AuthDataSource
- Nuestras implementaciones del DataSource y del Repository van en infrastructure.
- Aqu√≠ puedo crear los datasource dependiendo de la base de datos, por ejemplo podria tener mongo.auth.datasource.impl.ts y sql.auth.datasource.impl.ts

//MIO
Puedo hacer un middleware para internecializar mi back, recibir del front el lenguaje y de acuerdo a eso mostrar el mensaje y tener uno por defecto

# No NGINX needed here as we have a separate NGINX container


# Stage 1: Build Angular app
# FROM node:18-alpine as builder

# WORKDIR /app

# # Copy the rest of the application code
# COPY . .

# # Install dependencies
# RUN npm install

# # Build the Angular app
# RUN npm run build

# # Stage 2: Serve Angular app using NGINX
# FROM nginx:alpine as ngx

# # Copy built Angular app from Stage 1
# COPY --from=builder /app/docs/browser /usr/share/nginx/html

# # Copy custom Nginx configuration file
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# # Create NGINX cache directory
# RUN mkdir -p /var/cache/nginx/client_temp

# # Set ownership of NGINX cache directory
# RUN chown -R nginx:nginx /var/cache/nginx

# # Expose port 80
# EXPOSE 80

# # Start NGINX
# CMD ["nginx", "-g", "daemon off;"]
